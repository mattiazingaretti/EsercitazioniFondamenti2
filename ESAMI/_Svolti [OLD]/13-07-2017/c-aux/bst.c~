#include <stdlib.h>
#include <stdio.h>
#include "bst.h"
#include "queue.h"

static BinNode * BST_node_new(int x, int y) {
    /*NON MODIFICARE*/
    BinNode * b = malloc(sizeof(BinNode));
	b->coordinates[0] = x;
	b->coordinates[1] = y;
	b->left = NULL;
	b->right = NULL;

	return b;
}

BST * BST_new() {
    /*NON MODIFICARE*/
        BST * b = malloc(sizeof(BST));
        b->root = NULL;

	return b;
}

BinNode * BST_insert(BST * b, int x, int y) {
        /*DA IMPLEMENTARE*/
        return NULL; //istruzione aggiunta per permettere la compilazione
}


static void BST_delete_aux(BinNode * t) {
/*NON MODIFICARE*/
	if (t == NULL)
		return;

        BST_delete_aux(t->left);
        BST_delete_aux(t->right);
	free(t);
}

void BST_delete(BST * b) {
/*NON MODIFICARE*/
	if (b == NULL)
		return;

        BST_delete_aux(b->root);
        free(b);
}

void BST_print_aux(BinNode * t, int level) {
    /*MODIFICABILE*/
    int i;
    for (i = 0; i < level - 1; i++) {
    	printf("   ");
    }

    if (level > 0) {
    	printf(" |--");
    }

    if (t == NULL){
        printf("%c \n",35);
        return;
    }

    printf("(%d,%d)\n", t->coordinates[0],t->coordinates[1]);

    BST_print_aux(t->left, level + 1);
    BST_print_aux(t->right, level + 1);
}

void BST_print(BST * b){
    /*MODIFICABILE*/
    return BST_print_aux(b->root, 0);
}


int aligned(BST * b, int x){
        /*DA IMPLEMENTARE*/
        return 0; //istruzione aggiunta per permettere la compilazione
}

int rangeQ(BST * b, int x1, int y1, int x2, int y2){
        /*DA IMPLEMENTARE*/
        return 0; //istruzione aggiunta per permettere la compilazione
}





